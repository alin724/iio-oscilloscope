variables:
  libiioPipelineId: 9
  libad9361iioPipelineId: 10
  libad9166iioPipelineId: 41

trigger:
  branches:
    include:
    - main
    - master
    - staging/*
    - 20*
  tags:
    include:
    - v*

pr:
  branches:
    include:
    - main
    - master
    - 20*

stages:
- stage: Builds
  #############################################
  # Builds
  #############################################
  jobs:
  - job: LinuxBuilds
    strategy:
      matrix:
        ubuntu_20_04_x86_64:
          imageName: 'ubuntu-20.04'
          OS_TYPE: 'ubuntu_docker'
          OS_VERSION: focal
          artifactName: 'Linux-Ubuntu-20.04'
          PACKAGE_TO_INSTALL: 'download/*.deb'
        ubuntu_22_04_x86_64:
          imageName: 'ubuntu-22.04'
          OS_TYPE: 'ubuntu_docker'
          OS_VERSION: jammy
          artifactName: 'Linux-Ubuntu-22.04'
          PACKAGE_TO_INSTALL: 'download/*.deb'
    pool:
      vmImage: $(imageName)
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
      persistCredentials: true
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: $(libiioPipelineId)
        artifact: '$(artifactName)'
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
        path: '$(Agent.BuildDirectory)/s/download/'
      displayName: 'Get libiio artifacts'
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: $(libad9361iioPipelineId)
        artifact: '$(artifactName)'
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
        path: '$(Agent.BuildDirectory)/s/download/'
      displayName: 'Get libad9361-iio artifacts'
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: $(libad9166iioPipelineId)
        artifact: '$(artifactName)'
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
        path: '$(Agent.BuildDirectory)/s/download/'
      displayName: 'Get libad9166-iio artifacts'
    - script: |
        sudo apt-get -qq update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential libxml2-dev libcurl4-openssl-dev libmatio-dev libglib2.0-dev libfftw3-dev libusb-1.0-0-dev
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libgtk-3-dev libgtk-3-bin libjansson-dev doxygen libaio-dev libavahi-client-dev libserialport-dev
        wget https://downloads.sourceforge.net/project/gtkdatabox/gtkdatabox-1/gtkdatabox-1.0.0.tar.gz
        tar xvf gtkdatabox-1.0.0.tar.gz
        cd gtkdatabox-1.0.0
        ./configure
        ls -al
        sudo make install
        cd ..
        sudo dpkg -i $PACKAGE_TO_INSTALL
      displayName: 'Install Dependencies'
    - script: |
        mkdir build && cd build 
        cmake ../
        make
      displayName: "Build"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

  - job: ARMBuilds
    # Host Box
    pool:
      vmImage: "ubuntu-latest"
    # Docker Images
    strategy:
      matrix:
        ubuntu-ppc64le:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: ppc64le
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-ppc64le'
        ubuntu-x390x:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: s390x
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-x390x'
        debian_buster_arm32v7:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: arm
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-arm32v7'
        debian_buster_arm64v8:
          image: tfcollins/libiio_ubuntu_18_04-ci-arm-ppc:latest
          arch: aarch64
          build_script: ci-ubuntu.sh
          artifactName: 'Ubuntu-arm64v8'
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: $(libiioPipelineId)
        artifact: '$(artifactName)'
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
        path: '$(Agent.BuildDirectory)/s/download/'
      displayName: 'Get libiio artifacts'
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: $(libad9361iioPipelineId)
        artifact: '$(artifactName)'
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
        path: '$(Agent.BuildDirectory)/s/download/'
      displayName: 'Get libad9361-iio artifacts'
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'specific'
        project: '$(System.TeamProjectId)'
        pipeline: $(libad9166iioPipelineId)
        artifact: '$(artifactName)'
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
        path: '$(Agent.BuildDirectory)/s/download/'
      displayName: 'Get libad9166-iio artifacts'
    - script: |
        set -e
        sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross
        sudo apt-get install -y g++-arm-linux-gnueabihf
        sudo apt-get install -y g++-aarch64-linux-gnu
        sudo apt-get install -y qemu-system-ppc64
        sudo apt-get install qemu binfmt-support qemu-user-static
        sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      displayName: "Setup"
    - script: |
        set -e
        sudo docker run --platform "linux/$(arch)" --rm -t --privileged -e ARTIFACTNAME=$(artifactName) -v "$(Agent.BuildDirectory)/s":"/ci" -v "/usr/bin/qemu-$(arch)-static":"/usr/bin/qemu-$(arch)-static" "$(image)" /bin/bash -c "cd /ci/ && chmod +x ./CI/travis/install_deps.sh && ./CI/travis/install_deps.sh"
      displayName: "Install iio"
    - script: |
        set -e
        sudo docker run --platform "linux/$(arch)" --rm -t --privileged -e ARTIFACTNAME=$(artifactName) -v "$(Agent.BuildDirectory)/s":"/ci" -v "/usr/bin/qemu-$(arch)-static":"/usr/bin/qemu-$(arch)-static" "$(image)" /bin/bash -c "cd /ci/ && chmod +x ./CI/travis/$(build_script) && ./CI/travis/$(build_script)"
      displayName: "Build"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
